// Mocks generated by Mockito 5.4.5 from annotations
// in stargazer/test/predicting_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:camera/camera.dart' as _i4;
import 'package:image/image.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stargazer/features/prediction/domain/usecases/predicting_usecase.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PredictingUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPredictingUsecase extends _i1.Mock implements _i2.PredictingUsecase {
  @override
  bool get isInitialized =>
      (super.noSuchMethod(
            Invocation.getter(#isInitialized),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set isInitialized(bool? _isInitialized) => super.noSuchMethod(
    Invocation.setter(#isInitialized, _isInitialized),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<bool> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<bool>.value(false),
            returnValueForMissingStub: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<dynamic>> call(_i4.XFile? imageFile) =>
      (super.noSuchMethod(
            Invocation.method(#call, [imageFile]),
            returnValue: _i3.Future<List<dynamic>>.value(<dynamic>[]),
            returnValueForMissingStub: _i3.Future<List<dynamic>>.value(
              <dynamic>[],
            ),
          )
          as _i3.Future<List<dynamic>>);

  @override
  List<double> preprocessImage(_i5.Image? image) =>
      (super.noSuchMethod(
            Invocation.method(#preprocessImage, [image]),
            returnValue: <double>[],
            returnValueForMissingStub: <double>[],
          )
          as List<double>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
