// Mocks generated by Mockito 5.4.5 from annotations
// in stargazer/test/predicting_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:camera/camera.dart' as _i2;
import 'package:image/image.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stargazer/features/prediction/domain/usecases/predicting_usecase.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeXFile_0 extends _i1.SmartFake implements _i2.XFile {
  _FakeXFile_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PredictingUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPredictingUsecase extends _i1.Mock implements _i3.PredictingUsecase {
  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.XFile> call(_i2.XFile? imageFile) =>
      (super.noSuchMethod(
            Invocation.method(#call, [imageFile]),
            returnValue: _i4.Future<_i2.XFile>.value(
              _FakeXFile_0(this, Invocation.method(#call, [imageFile])),
            ),
            returnValueForMissingStub: _i4.Future<_i2.XFile>.value(
              _FakeXFile_0(this, Invocation.method(#call, [imageFile])),
            ),
          )
          as _i4.Future<_i2.XFile>);

  @override
  _i4.Future<_i2.XFile> drawPrediction(
    _i2.XFile? image,
    List<dynamic>? prediction,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#drawPrediction, [image, prediction]),
            returnValue: _i4.Future<_i2.XFile>.value(
              _FakeXFile_0(
                this,
                Invocation.method(#drawPrediction, [image, prediction]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.XFile>.value(
              _FakeXFile_0(
                this,
                Invocation.method(#drawPrediction, [image, prediction]),
              ),
            ),
          )
          as _i4.Future<_i2.XFile>);

  @override
  List<double> preprocessImage(_i5.Image? image) =>
      (super.noSuchMethod(
            Invocation.method(#preprocessImage, [image]),
            returnValue: <double>[],
            returnValueForMissingStub: <double>[],
          )
          as List<double>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
